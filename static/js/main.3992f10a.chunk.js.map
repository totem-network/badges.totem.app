{"version":3,"sources":["logo.svg","Badge.js","Badges.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withStyles","card","display","margin","maxWidth","textAlign","media","objectFit","content","buy","marginLeft","props","classes","image","name","price","expires","react_default","a","createElement","Card_default","className","CardActionArea_default","CardMedia_default","component","alt","height","title","CardContent_default","Typography_default","gutterBottom","variant","CardActions_default","Button_default","size","color","onClick","provider","window","web3","providers","Web3Provider","currentProvider","console","log","getDefaultProvider","BadgesContract","Contract","BadgesContractData","abi","getSigner","getBadges","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","length","badgesLength","badges","lastBlock","_loop","i","wrap","_context2","prev","next","getBadgesLength","sent","toNumber","getBlockNumber","badge","badgeURI","badgeData","seconds","badgeResponse","badgeJSON","badgeMetaData","_context","_badges","getBadgeData","sub","utils","formatEther","DateTime","local","plus","toLocaleString","DATETIME_MED","fetch","text","JSON","parse","value","push","stop","delegateYield","abrupt","apply","this","arguments","Badges","context","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","then","setState","objectSpread","map","index","src_Badge","key","Component","App","src_Badges_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3992f10a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  card: {\n    display: 'inline-block',\n    margin: '1rem',\n    maxWidth: 345,\n    textAlign: 'left',\n  },\n  media: {\n    // ⚠️ object-fit is not supported by IE 11.\n    objectFit: 'cover',\n  },\n  content: {\n  },\n  buy: {\n        marginLeft: 'auto',\n  },\n};\n\nfunction Badge(props) {\n  const { classes, image, name, price, expires, buy } = props;\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          alt={name}\n          className={classes.media}\n          height=\"240\"\n          image={image}\n          title={name}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {name}\n          </Typography>\n          <Typography\n            component=\"p\"\n            className={classes.content}\n        >\n            Price: {price} ETH<br />\n            Expires: {expires}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\" onClick={buy} className={classes.buy}>\n          Buy\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nBadge.propTypes = {\n  classes: PropTypes.object.isRequired,\n  image: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  expires: PropTypes.string.isRequired,\n  buy: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(Badge);","import { Contract, providers, utils } from 'ethers';\nimport { DateTime } from 'luxon';\nimport React, { Component } from 'react';\nimport Badge from './Badge';\nimport BadgesContractData from './Badges.json';\n\nlet provider = null;\nif (typeof window.web3 !== 'undefined') {\n    // Use Mist/MetaMask's provider\n    provider = new providers.Web3Provider(window.web3.currentProvider);\n} else {\n    console.log('No web3? You should consider trying MetaMask!')\n    // Allow read-only access to the blockchain if no Mist/Metamask/EthersWallet\n    provider = providers.getDefaultProvider();\n}\n\n// 0xCE43450785eAF4c5962b6109432761a1af08e4fd\nconst BadgesContract = new Contract('0xCE43450785eAF4c5962b6109432761a1af08e4fd', BadgesContractData.abi, provider.getSigner());\n\nconst getBadges = async () => {\n    const length = await BadgesContract.getBadgesLength();\n    const badgesLength = length.toNumber();\n\n    const badges = [];\n\n    const lastBlock = await provider.getBlockNumber();\n    console.log(lastBlock);\n\n    for (let i = 0; i < badgesLength; i++) {\n        const badge = {};\n\n        const badgeURI = await BadgesContract._badges(i);\n        const badgeData = await BadgesContract.getBadgeData(badgeURI);\n\n        const seconds = badgeData.expires.sub(lastBlock).toNumber() * 13;\n\n        badge.price = utils.formatEther(badgeData.price);\n        badge.expires = '~' + DateTime.local().plus({\n            seconds\n        }).toLocaleString(DateTime.DATETIME_MED);\n\n        const badgeResponse = await fetch(badgeURI);\n\n        const badgeJSON = await badgeResponse.text();\n        const badgeMetaData = JSON.parse(badgeJSON);\n\n        badge.name = badgeMetaData.name;\n        badge.image = badgeMetaData.image;\n\n        badge.buy = () => {\n            BadgesContract.buy(badgeURI, {\n                value: badgeData.price\n            });\n        };\n\n        badges.push(badge);\n    }\n\n    return badges;\n};\n\nclass Badges extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            badges: []\n        };\n    }\n\n    componentDidMount() {\n        getBadges().then((badges) => {\n            this.setState({\n                ...this.state,\n                badges,\n            });\n        });\n    }\n\n    render() {\n        const { badges } = this.state;\n\n        return badges.map((badge, index) => {\n            return (\n                <Badge\n                    key={index}\n                    name={badge.name}\n                    image={badge.image}\n                    price={badge.price}\n                    expires={badge.expires}\n                    buy={badge.buy}\n                />\n            );\n        });\n    }\n}\n\nexport default Badges;\n","import React, { Component } from 'react';\nimport Badges from './Badges';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Badges />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}